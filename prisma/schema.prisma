generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CareerTimeline {
  idCareerTimeline Int      @id @default(autoincrement())
  idPerson         Int
  career           String   @db.VarChar(45)
  description      String   @db.Text
  company          String   @db.VarChar(255)
  init             DateTime @db.Date
  end              DateTime @db.Date
  dateStart        DateTime @default(now()) @db.Timestamp(0)
  dateUpd          DateTime @default(now()) @db.Timestamp(0)
  Person           Person   @relation(fields: [idPerson], references: [idPerson], onDelete: NoAction, onUpdate: NoAction, map: "fk_CareerTimeline_Person1")

  @@index([idPerson], map: "fk_CareerTimeline_Person1_idx")
}

model EducationalProject {
  idEducationalProject Int      @id @default(autoincrement())
  idPerson             Int
  project              String   @db.VarChar(45)
  description          String   @db.Text
  url                  String?  @db.VarChar(255)
  dateStart            DateTime @default(now()) @db.Timestamp(0)
  dateUpd              DateTime @default(now()) @db.Timestamp(0)
  Person               Person   @relation(fields: [idPerson], references: [idPerson], onDelete: NoAction, onUpdate: NoAction, map: "fk_CareerTimeline_Person10")

  @@index([idPerson], map: "fk_CareerTimeline_Person2_idx")
}

model LanguageProfile {
  idLanguageProfile Int      @id @default(autoincrement())
  idPerson          Int
  language          String   @db.VarChar(45)
  level             String   @db.VarChar(45)
  dateStart         DateTime @default(now()) @db.Timestamp(0)
  dateUpd           DateTime @default(now()) @db.Timestamp(0)
  Person            Person   @relation(fields: [idPerson], references: [idPerson], onDelete: NoAction, onUpdate: NoAction, map: "fk_LanguageProfile_Person1")

  @@index([idPerson], map: "fk_LanguageProfile_Person1_idx")
}

model PermissionAction {
  permissionDo   String           @id @db.VarChar(100)
  description    String?          @db.VarChar(255)
  rolepermission RolePermission[]
}

model PermissionSubject {
  permissionSubject String           @id @db.VarChar(100)
  description       String?          @db.VarChar(255)
  rolepermission    RolePermission[]
}

model Person {
  idPerson           Int                  @id
  idUser             Int
  name               String               @db.VarChar(45)
  lastName           String               @db.VarChar(45)
  birth              DateTime             @db.Date
  cell               String               @db.VarChar(45)
  country            String               @db.VarChar(45)
  motivation         String?              @db.Text
  dateStart          DateTime             @default(now()) @db.Timestamp(0)
  dateUpd            DateTime             @default(now()) @db.Timestamp(0)
  CareerTimeline     CareerTimeline[]
  EducationalProject EducationalProject[]
  LanguageProfile    LanguageProfile[]
  User               User                 @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "fk_Person_User1")
  TecnologieProfile  TecnologieProfile[]

  @@index([idUser], map: "fk_Person_User1_idx")
}

model Role {
  role                                     String           @id @db.VarChar(100)
  description                              String?          @db.VarChar(255)
  rolepermission_rolepermission_roleTorole RolePermission[] @relation("rolepermission_roleTorole")
  user_user_roleTorole                     User[]           @relation("user_roleTorole")
}

model RolePermission {
  idRolPermission                Int               @id @default(autoincrement())
  role                           String            @db.VarChar(100)
  permissionDo                   String            @db.VarChar(100)
  permissionSubject              String            @db.VarChar(100)
  PermissionAction               PermissionAction  @relation(fields: [permissionDo], references: [permissionDo], onDelete: NoAction, onUpdate: NoAction, map: "fk_RolePermission_PermissionAction1")
  PermissionSubject              PermissionSubject @relation(fields: [permissionSubject], references: [permissionSubject], onDelete: NoAction, onUpdate: NoAction, map: "fk_RolePermission_PermissionSubject1")
  role_rolepermission_roleTorole Role              @relation("rolepermission_roleTorole", fields: [role], references: [role], onDelete: NoAction, onUpdate: NoAction, map: "fk_RolePermission_Role1")

  @@index([permissionDo], map: "fk_RolePermission_PermissionAction1_idx")
  @@index([permissionSubject], map: "fk_RolePermission_PermissionSubject1_idx")
  @@index([role], map: "fk_RolePermission_Role1_idx")
}

model TecnologieProfile {
  idTecnologieProfile Int      @id @default(autoincrement())
  idPerson            Int
  tecnologie          String   @db.VarChar(45)
  description         String   @db.Text
  dateStart           DateTime @default(now()) @db.Timestamp(0)
  dateEnd             DateTime @default(now()) @db.Timestamp(0)
  Person              Person   @relation(fields: [idPerson], references: [idPerson], onDelete: NoAction, onUpdate: NoAction, map: "fk_TecnologieProfile_Person1")

  @@index([idPerson], map: "fk_TecnologieProfile_Person1_idx")
}

model User {
  idUser               Int                 @id @default(autoincrement())
  role                 String              @db.VarChar(100)
  email                String              @unique(map: "email_UNIQUE") @db.VarChar(255)
  alias                String              @unique(map: "alias_UNIQUE") @db.VarChar(15)
  password             String?             @db.VarChar(120)
  image                String?             @db.Text
  emailVerified        DateTime?           @db.Timestamp(0)
  dateStart            DateTime            @default(now()) @db.Timestamp(0)
  dateUpd              DateTime            @default(now()) @db.Timestamp(0)
  Person               Person[]
  role_user_roleTorole Role                @relation("user_roleTorole", fields: [role], references: [role], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_Role1")
  VerificationToken    VerificationToken[]

  @@index([role], map: "fk_User_Role1_idx")
}

model VerificationToken {
  idVerificationToken BigInt   @id @default(autoincrement())
  idUser              Int
  token               String   @unique(map: "token_UNIQUE") @db.VarChar(255)
  expires             DateTime @db.Timestamp(0)
  dateStart           DateTime @default(now()) @db.Timestamp(0)
  dateUpd             DateTime @default(now()) @db.Timestamp(0)
  User                User     @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "fk_VerificationToken_User1")

  @@index([idUser], map: "fk_VerificationToken_User1_idx")
}
